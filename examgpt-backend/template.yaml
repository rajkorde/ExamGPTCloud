AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  examgpt-backend
  Backend for examgpt.  * API gateway, Lambda and S3 used for uploading study material * DynamoDB, Lambda, SNS used for storing examgpt data * API Gateway, Lambda used for for telegram bot

Globals:
  Function:
    Runtime: python3.12
    Timeout: 300
    Environment:
      Variables:
        EXAM_TABLE: !Ref ExamTable

# TODO: enable cloudwatch logs and metrics to expire after 3 days
Resources:
  # S3 Buckets
  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-bucket

  # SNS Topics
  ChunkTopic:
    Type: AWS::SNS::Topic

  # Parameter Store
  # Deploys parameters with dummy values. Update these with real values using
  # scripts/store_env_in_cloud.sh
  ParameterStoreOpenAIKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /examgpt/OPENAI_API_KEY
      Type: String
      Description: OPENAI API key
      Value: OPENAI_API_KEY

  ParameterStoreTelegramToken:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /examgpt/TG_BOT_TOKEN
      Type: String
      Value: TG_BOT_TOKEN

  ParameterStoreModelFamily:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /examgpt/MODEL_FAMILY
      Type: String
      Value: MODEL_FAMILY

  ParameterStoreModelName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /examgpt/MODEL_NAME
      Type: String
      Value: MODEL_NAME

  # DynamoDB
  ExamTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      KeySchema:
        - AttributeName: exam_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: exam_id
          AttributeType: S
      TableName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-exam

  # TODO: switch billing mode to use the full free tier capacity
  ChunkTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-chunk
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      KeySchema:
        - AttributeName: chunk_id
          KeyType: HASH
        - AttributeName: exam_id
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: chunk_id
          AttributeType: S
        - AttributeName: exam_id
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: ExamIndex
          KeySchema:
            - AttributeName: exam_id
              KeyType: HASH
            - AttributeName: chunk_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

  # Rest APIs
  ExamGPTRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  # Lambda Functions
  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: examgpt_backend/
      Handler: upload.handler
      MemorySize: 128
      Environment:
        Variables:
          CONTENT_BUCKET: !Ref ContentBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ContentBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref ExamTable
      Events:
        APIEvent:
          Type: Api
          Properties:
            Path: /upload
            Method: POST
            RestApiId: !Ref ExamGPTRestApi

  ChunkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: examgpt_backend/
      Handler: chunker.handler
      MemorySize: 512
      Environment:
        Variables:
          CHUNK_TOPIC: !Ref ChunkTopic
          CHUNK_TABLE: !Ref ChunkTable
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ChunkTopic.TopicName
        - DynamoDBCrudPolicy:
            TableName: !Ref ChunkTable
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref ContentBucket
            Events:
              - s3:ObjectCreated:*

  GenerateQAFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: examgpt_backend/
      Handler: generate.handler
      Environment:
        Variables:
          CHUNK_TABLE: !Ref ChunkTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChunkTable
        - Statement:
            - Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Effect: Allow
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/examgpt*
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref ChunkTopic

  SandboxFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: examgpt_backend/
      Handler: sandbox.handler
      Events:
        APIEvent:
          Type: Api
          Properties:
            Path: /sandbox
            Method: POST
            RestApiId: !Ref ExamGPTRestApi

  # Connectors
  ChunkerFunctionContentBucketConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: ChunkerFunction
      Destination:
        Id: ContentBucket
      Permissions:
        - Read

Outputs:
  ExamGPTRestApi:
    Description: API Gateway endpoint for uploading files
    Value: !Sub https://${ExamGPTRestApi}.execute-api.${AWS::Region}.amazonaws.com/Stage
  # UploadFunction:
  #   Description: "Function that uploads file"
  #   Value: !GetAtt UploadFunction.Arn
  # ChunkerFunction:
  #   Description: "Function that chunks uploaded file"
  #   Value: !GetAtt ChunkerFunction.Arn
  # SandboxFunction:
  #   Description: "Sandbox Lambda for testing resources"
  #   Value: !GetAtt SandboxFunction.Arn
  # S3Bucket:
  #   Description: "Bucket where uploaded files are stored"
  #   Value: !GetAtt ContentBucket.Arn
