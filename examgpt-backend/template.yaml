AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  examgpt-backend

  Backend for examgpt. 
  * API gateway, Lambda and S3 used for uploading study material
  * DynamoDB, Lambda, SNS used for storing examgpt data
  * API Gateway, Lambda used for for telegram bot

Globals:
  Function:
    Timeout: 30
    MemorySize: 128

Resources:
  # ECR Repositories
  UploadRepository:
    Type: AWS::ECR::PublicRepository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-upload-repo"

  ChunkerRepository:
    Type: AWS::ECR::PublicRepository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-chunker-repo"

  # S3 Buckets
  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-bucket"

  # SNS Topics

  # Rest APIs
  UploadRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  # Lambda Functions
  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Sub "${UploadRepository.RepositoryUri}:$LATEST"
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ContentBucket
      Environment:
        Variables:
          CONTENT_BUCKET: !Ref ContentBucket
      Events:
        APIEvent:
          Type: Api
          Properties:
            Path: /upload
            Method: POST
            RestApiId: !Ref UploadRestApi
    Metadata:
      Dockerfile: upload.Dockerfile
      DockerContext: ./examgpt_backend
      DockerTag: python3.12-v1
      DockerImageRepository: !Ref ChunkerRepository

  ChunkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Sub "${ChunkerRepository.RepositoryUri}:$LATEST"
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref ContentBucket
            Events:
              - s3:ObjectCreated:*
    Metadata:
      Dockerfile: chunker.Dockerfile
      DockerContext: ./examgpt_backend
      DockerTag: python3.12-v1
      DockerImageRepository: !Ref ChunkerRepository

  # Connectors
  ChunkerFunctionLambdaContentBucketConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: ChunkerFunction
      Destination:
        Id: ContentBucket
      Permissions:
        - Read

Outputs:
  UploadRestApi:
    Description: "API Gateway endpoint for uploading files"
    Value: !Sub "https://${UploadRestApi}.execute-api.${AWS::Region}.amazonaws.com/Stage/upload/"
  ChunkerFunction:
    Description: "Function that chunks uploaded file"
    Value: !GetAtt ChunkerFunction.Arn
  ChunkerFunctionIamRole:
    Description: "Implicit IAM Role created for ChunkerFunction"
    Value: !GetAtt ChunkerFunctionRole.Arn
  S3Bucket:
    Description: "Bucket where uploaded files are stored"
    Value: !GetAtt ContentBucket.Arn
  ChunkerRepository:
    Description: "Public ECR repository for ChunkerFunction"
    Value: !Ref ChunkerRepository
  UploadRepository:
    Description: "Public ECR repository for UploadFunction"
    Value: !Ref UploadRepository
